#!/bin/bash

# Copyright Â© 2012-2016 Intel Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#
# Authors:
#    Daniel Vetter <daniel.vetter@ffwll.ch>
#    Jani Nikula <jani.nikula@intel.com>

# drm-intel-next maintainer script

# gvt maintainer script based on 'dim' tool
#
#    Zhenyu Wang <zhenyuw@linux.intel.com>

# TODO
# - extract the integration tree logic and make it generally useful, maybe for a
#   drm-integration tree ...
# - Improve staging-forget to forget a specific merge instead of just the first
#   dinq/dif merge.
# - add option to check-patch to check stdin
# - integrate ninja-check? Or too much checkers considered harmful?
#   https://lists.linuxfoundation.org/pipermail/ksummit-discuss/2014-May/000554.html
# - add patchwork Link: also after manually resolving conflicts in drm
#   apply-resolved
# - pull in dim extract-tags tool from Ville
# - allow dim rebuild-staging to pull branches from local trees in dry-run mode.
#   This is useful to confirm a backmerge is indeed correct, by comparing the
#   resulting -staging with the old one. Current the branch must be pushed out
#   first for rebuild-staging to pick it up, which means the merge can't be
#   fixed any more.

# fail on any goof-up
set -e

#
# User configuration. Set in environment or configuration file. See
# dimrc.sample for an example.
#

# dim configuration file
DIM_CONFIG=${DIM_CONFIG:-$HOME/.dimrc}
if [ -r $DIM_CONFIG ]; then
    . $DIM_CONFIG
fi
# warning if no config found?

# prefix for repo directories
DIM_PREFIX=${DIM_PREFIX:-$HOME/linux}

# main maintainer repo under $DIM_PREFIX
DIM_GVT_LINUX=${DIM_GVT_LINUX:-src}

# name of the $drm_intel_ssh remote within $DIM_GVT_LINUX
DIM_GVT_LINUX_REMOTE=${DIM_GVT_LINUX_REMOTE:-origin}

# name of the $drm_upstream_git remote within $DIM_GVT_LINUX
# match rerere/staging.conf
DIM_DRM_INTEL_UPSTREAM_REMOTE="drm-intel"

# name of $drm_tip_upstream_git remote
DIM_DRM_TIP_UPSTREAM_REMOTE="drm-tip"

# mail user agent. must support a subset of mutt(1) command line options:
# usage: $DIM_MUA [-s subject] [-i file] [-c cc-addr] to-addr [...]
DIM_MUA=${DIM_MUA:-mutt}

# command to run after dim apply
DIM_POST_APPLY_ACTION=${DIM_POST_APPLY_ACTION:-}

# greetings pull request template
DIM_TEMPLATE_HELLO=${DIM_TEMPLATE_HELLO:-$HOME/.dim.template.hello}

# signature pull request template
DIM_TEMPLATE_SIGNATURE=${DIM_TEMPLATE_SIGNATURE:-$HOME/.dim.template.signature}

#
# Internal configuration.
#

today=`date +%Y-%m-%d`

#drm_upstream_git=git://people.freedesktop.org/~airlied/linux
#sound_upstream_git=git://git.kernel.org/pub/scm/linux/kernel/git/tiwai/sound.git
#driver_core_upstream_git=git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/driver-core.git
linux_upstream_git=git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git

gvt_linux_git=https://github.com/01org/gvt-linux
drm_intel_upstream_git=git://anongit.freedesktop.org/drm-intel
drm_tip_upstream_git=git://anongit.freedesktop.org/drm/drm-tip
vfio_upstream_git=https://github.com/awilliam/linux-vfio.git
kvm_upstream_git=git://git.kernel.org/pub/scm/virt/kvm/kvm.git

# email aliases
addr_drm_maintainer="Dave Airlie <airlied@gmail.com>"
addr_drm_intel_maintainer="Daniel Vetter <daniel.vetter@ffwll.ch>"
addr_intel_gfx_maintainer1="Daniel Vetter <daniel.vetter@ffwll.ch>"
addr_intel_gfx_maintainer2="Jani Nikula <jani.nikula@linux.intel.com>"
addr_intel_gfx="intel-gfx@lists.freedesktop.org"
addr_dri_devel="dri-devel@lists.freedesktop.org"
addr_intel_qa="\"Christophe Prigent\" <christophe.prigent@intel.com>"

# FIXME
addr_gvt_maintainer1="\"Zhenyu Wang\" <zhenyuw@linux.intel.com>"
addr_gvt_maintainer2="zhi.a.wang@intel.com"
addr_gvt_internal="intel-gvt@eclists.intel.com"
addr_gvt_qa="otc.vgt.qa@intel.com"

#
# Command line options.
#

DRY_RUN=
INTERACTIVE=
DRY=
FORCE=
HELP=

function warn_or_fail
{
	if [[ $FORCE ]] ; then
		echo WARNING: $1, but continuing
	else
		echo ERROR: $1, aborting
		exit 1
	fi
}

while getopts hdfi opt; do
	case "$opt" in
		d)
			DRY_RUN=--dry-run
			DRY=echo
			;;
		f)
			FORCE=1
			;;
		i)
			INTERACTIVE='eval read -rsp "Press any key to continue..." -n1 key2; echo'
			;;
		h)
			HELP=1
			;;
		*)
			echo "See '$0 help' for more information." >&2
			exit
	esac
done
shift `expr $OPTIND - 1`

# first positional argument is the subcommand
if [ -n "$HELP" -o "$#" = "0" ]; then
    subcommand="usage"
else
    subcommand="$1"
    shift
fi

#
# Sanity checks.
#

if [ "$subcommand" != "setup" -a "$subcommand" != "help" -a "$subcommand" != "usage" ]; then
	#for d in $DIM_PREFIX $DIM_PREFIX/$DIM_GVT_LINUX $DIM_PREFIX/gvt-rerere $DIM_PREFIX/gvt-staging; do
	for d in $DIM_PREFIX $DIM_PREFIX/$DIM_GVT_LINUX $DIM_PREFIX/gvt-staging; do
		if [ ! -d $d ]; then
			echo "$d is missing, please check your configuration and/or run dim setup"
			exit 1
		fi
	done

	#
	# Internal configuration that depends on a sane setup.
	#

	dim_branches=`(source $DIM_PREFIX/staging.conf ; echo $staging_branches) | \
		xargs -n 1 echo | grep '^origin' | sed -e 's/^origin\///'`

fi

# get message id from file
# $1 = file
message_get_id ()
{
	python <<EOF
from email.parser import Parser
headers = Parser().parse(open('$1', 'r'))
message_id = headers['message-id']
if message_id is not None:
    print(message_id.strip('<>'))
EOF
}

# append all arguments as tags at the end of the commit message of HEAD
function dim_commit_add_tag
{
	for arg; do
		# the first sed deletes all trailing blank lines at the end
		git log -1 --pretty=%B | \
			sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' | \
			sed "\$a${arg}" | \
			git commit --amend -F-
	done
}

# XXX double check with process
# So we will have branches as below:
# 'gvt-next' : normal next target for dinq
# 'gvt-fixes' : normal fixes target for drm-intel-fixes
# 'gvt-next-fixes' : 'gvt-next' fixes
function update_linux_next
{
	cd $DIM_PREFIX/gvt-staging

	# XXX check, just push the specific branch?
	
	# always update gvt-fixes
	echo -n "Pushing gvt-fixes to for-drm-intel-fixes... "
	git push $DRY_RUN origin +origin/gvt-fixes:for-drm-intel-fixes >& /dev/null && echo "Done." || echo "Fail"

	if git merge-base --is-ancestor origin/gvt-next-fixes origin/gvt-fixes ; then
		# -fixes has caught up to dinf, i.e. we're out of the merge
		# window. Push the next queue.
		echo -n "Out of merge window. Pushing gvt-next to for-drm-intel-next-queued... "
		git push $DRY_RUN origin +origin/gvt-next:for-drm-intel-next-queued >& /dev/null && echo "Done." || echo "Fail"
	else
		# dinf is ahead of -fixes, i.e. drm-next has already closed for
		# the next merge window and we've started to gather new fixes
		# for the current -next cycle. Push dinf

		echo -n "Pushing gvt-next-fixes to for-drm-intel-next-fixes... "
		git push $DRY_RUN origin +origin/gvt-next-fixes:for-drm-intel-next-fixes >& /dev/null && echo "Done." || echo "Fail"
	fi
}

function check_conflicts
{
	if git diff | grep '\(<<<<<<<\|=======\|>>>>>>>\||||||||\)' ; then
		if [ -n "$1" ]; then
			echo $*
		fi
		exit 1
	fi
	true
}

function update_rerere_cache
{
	cd $DIM_PREFIX/gvt-rerere/
	git pull
	cp rr-cache/* $DIM_PREFIX/gvt-staging/.git/rr-cache/ -r
	cd -
}

function dim_rebase_xengt
{
    local integration_branch=gvt-staging
    local xengt_branch=topic/gvt-xengt
    local time="`date +%Yy-%mm-%dd-%Hh-%Mm-%Ss`"

    cd $DIM_PREFIX/$integration_branch

    git fetch origin 
    if git branch | grep $xengt_branch >& /dev/null; then
	echo "Force to refresh current $xengt_branch"
	git branch -D $xengt_branch
	git fetch origin +$xengt_branch:$xengt_branch
    else
	echo "Create new $xengt_branch"
	git branch $xengt_branch origin/$xengt_branch
    fi
    git checkout $xengt_branch

    if ! git rebase -i origin/$integration_branch ; then
	echo "topic/gvt-xengt failed to rebase onto gvt-staging"
	#ignore error now
	cat >> /tmp/xengt-error <<-HERE

		topic/gvt-xengt failed to rebase to latest gvt-staging branch.

		conflicts:

		HERE
	git diff >> /tmp/xengt-error

	echo "" | $DRY $DIM_MUA -s "[INFO] topic/gvt-xengt fail to rebase on gvt-staging" \
	     -i /tmp/xengt-error \
	     -c "$addr_gvt_maintainer1" \
	     -c "$addr_gvt_maintainer2" \
	     -c "xiong.y.zhang@intel.com" \
	     -c "$addr_gvt_qa" \
	     "$addr_gvt_internal"

	git rebase --abort
	git reset --hard

	rm -f /tmp/xengt-error
    else
	echo "Tagging gvt-xengt-$time"
	git tag gvt-xengt-$time
	git push $DRY_RUN origin +HEAD >& /dev/null && echo "Done." || echo "Fail"
	git push $DRY_RUN origin gvt-xengt-$time >& /dev/null && echo "Done." || echo "Fail"

	$DRY $DIM_MUA -s "[INFO] New gvt-xengt-$time available" \
	     -c "$addr_gvt_maintainer1" \
	     -c "$addr_gvt_maintainer2" \
	     -c "xiong.y.zhang@intel.com" \
	     -c "$addr_gvt_qa" \
	     "$addr_gvt_internal"
    fi

    git checkout $integration_branch
    echo "done"
}

function dim_rebuild_staging
{
	local integration_branch=gvt-staging
	local specfile=`mktemp`
	local time="`date +%Yy-%mm-%dd-%Hh-%Mm-%Ss`"
	local commit_time="$time CST"
	local first=1

	#local rerere=$DIM_PREFIX/gvt-rerere

	#cd $rerere
	#if [[ `git status --porcelain | grep -v "^[ ?][ ?]" | wc -l` -gt 0 ]]; then
	#	warn_or_fail "-staging configuration file not commited"
	#fi

	#echo -n "Updating rerere cache and staging.conf... "
	#update_rerere_cache >& /dev/null
	#echo "Done."

	# pull $staging_branches
	#source $rerere/staging.conf
	source $DIM_PREFIX/staging.conf
	
	cd $DIM_PREFIX/$integration_branch

	if ! git branch | grep $integration_branch | grep '\*' >& /dev/null ; then
		echo "Branch setup for the integration repo is borked(not on $integration_branch?)"
		exit 1
	fi

	for remote in $(echo $staging_branches | tr " " "\n" | sed 's|/.*$||g' | sort -u); do
		echo "Fetching $remote... "
		# git fetch returns 128 if there's nothing to be fetched
		#git fetch $remote >& /dev/null || true
		git fetch $remote || true
		echo "Done."
	done

	# merge -fixes
	for tree in $staging_branches; do
		local branch=${tree%:*}
		local sha1=${tree#*:}
		local name=${branch##*/}

		# the : separator is optional
		if [[ $sha1 == $tree ]] ; then
			sha1=
		fi

		echo -n "Merging $branch... "

		if [[ -n $sha1 ]] ; then
			echo -n "Using override sha1: $sha1... "
		else
			sha1=$branch
		fi

		if [ $first == 1 ] ; then
			echo "Reset $sha1. Done."
			git reset --hard $sha1 >& /dev/null
			first=0
		elif git merge --rerere-autoupdate --ff-only $sha1 >& /dev/null ; then
			# nothing to do if just fast-forward
			echo "Fast-forward. Done."
			true
		else
			local fixup_file=$integration_branch-$name-fixup.patch

			echo "checking..$fixup_file"
			
			echo $fixup_file > .fixup_file_path

			git merge --rerere-autoupdate --no-commit $sha1 >& /dev/null || true
			if [ -f $fixup_file ] ; then
				echo -n "Applying manual fixup patch for $integration_branch merge... "
				patch -p1 -i $fixup_file
			fi
			check_conflicts "Fail: conflict merging $tree"
			git add -u

			# because we filter out fast-forward merges there will
			# always be something to commit
			git commit --no-edit --quiet
			echo "Done."
		fi

		echo -e "$branch `git rev-parse $sha1`\n\t`git log -1 $sha1 --pretty=format:%s`" >> $specfile

		$INTERACTIVE
	done

	echo -n "Adding integration manifest $integration_branch: $commit_time... "
	mv $specfile integration-manifest
	git add integration-manifest
	git commit --quiet -m "$integration_branch: $commit_time integration manifest"
	echo "Done."

	echo "Pushing $integration_branch... "
	$INTERACTIVE
	git push $DRY_RUN origin +HEAD >& /dev/null && echo "Done." || echo "Fail"

	echo "Tagging: $time... "
	git tag gvt-staging-$time
	git push $DRY_RUN origin gvt-staging-$time >& /dev/null && echo "Done." || echo "Fail"

	#echo -n "Updating rerere cache... "
	#cd $rerere
	#if git branch | grep gvt-rerere-cache | grep '\*' >& /dev/null ; then
	#	git pull >& /dev/null
	#	cp $DIM_PREFIX/$integration_branch/.git/rr-cache/* rr-cache -r
	#	git add *.patch >& /dev/null || true
	#	git add rr-cache/* > /dev/null
	#	if git commit -m "$time: $integration_branch rerere cache update" >& /dev/null; then
	#		echo -n "New commit. "
	#	else
	#		echo -n "Nothing changed. "
	#	fi
	#	echo -n "Pushing rerere cache... "
	#	git push $DRY_RUN origin HEAD >& /dev/null && echo "Done." || echo "Fail"
	#else
	#	echo "Fail: Branch setup for the gvt-rerere-cache is borked."
	#	exit 1
	#fi

	#update_linux_next

	$DRY $DIM_MUA -s "[INFO] New gvt-staging-$time available" \
	     -c "$addr_gvt_maintainer1" \
	     -c "$addr_gvt_maintainer2" \
	     -c "$addr_gvt_qa" \
	     "$addr_gvt_internal"
}

function dim_staging_forget
{
	cd $DIM_PREFIX/gvt-staging
	git fetch origin >& /dev/null
	git reset --hard origin/gvt-next >& /dev/null
	git merge origin/gvt-fixes
	git rerere forget
}

# push branch $1, rebuild staging. the rest of the arguments are passed to git
# push.
function dim_push_branch
{
	if [[ "x$1" = "x" ]]; then
		echo "usage: $0 $subcommand branch"
		exit 1
	fi

	branch=$1
	shift

	assert_branch $branch

	git push $DRY_RUN $DIM_GVT_LINUX_REMOTE $branch "$@"

	#dim_rebuild_staging
}

function dim_push_gvt_next
{
    dim_push_branch gvt-next "$@"
}

function dim_push_gvt_fixes
{
    dim_push_branch gvt-fixes "$@"
}

function dim_push_gvt_next_fixes
{
    dim_push_branch gvt-next-fixes "$@"
}

# ensure we're on branch $1, and apply patches. the rest of the arguments are
# passed to git am.
dim_alias_ab=apply-branch
dim_alias_sob=apply-branch
function dim_apply_branch
{
	local branch=$1
	shift
	local file=`mktemp`

	assert_branch $branch
	assert_repo_clean

	cat > $file

	# ignore message_id for now
#	local message_id=$(message_get_id $file)

	local commiter_email=$(git config --get user.email)
	local patch_from=$(grep "From:" "$file" | head -1)
	local sob
	if [[ "$patch_from" != *"$commiter_email"* ]] ; then
		sob=-s
	fi

	cat $file | git am -3 $sob "$@"

#	if [ -n "$message_id" ]; then
#		dim_commit_add_tag "Link: http://patchwork.freedesktop.org/patch/msgid/$message_id"
#	else
#		echo "No message-id found in the patch file."
#	fi

	checkpatch_commit HEAD

	eval $DRY $DIM_POST_APPLY_ACTION
}

dim_alias_aq=apply-gvt-next
function dim_apply_gvt_next
{
	dim_apply_branch gvt-next "$@"
}

dim_alias_af=apply-gvt-fixes
function dim_apply_gvt_fixes
{
	dim_apply_branch gvt-fixes "$@"
}

# have this?
dim_alias_anf=apply-gvt-next-fixes
function dim_apply_gvt_next_fixes
{
	dim_apply_branch gvt-next-fixes "$@"
}

function dim_cherry_pick
{
    warn_or_fail "FIXME"

	if [[ "x$1" = "x" ]]; then
		echo "usage: $0 $subcommand commit-ish"
		exit 1
	fi
	sha=`git rev-parse $1`
	sha_short=${sha:0:8}

	# need latest -staging
	git fetch $DIM_GVT_LINUX_REMOTE
	echo Possible fixup patches for your cherry-pick:
	git log --grep=$sha_short --pretty=oneline $sha..$DIM_GVT_LINUX_REMOTE/gvt-staging
	$DRY git cherry-pick -s -x -e $1
}

function dim_cherry_pick_branch
{
    warn_or_fail "FIXME"
    
	# Look for commits in dinq tagged as fixes.
	for commit in $(git log --reverse --format=format:%h --grep="drm-intel-fixes@lists.freedesktop.org" --grep="stable@vger.kernel.org" origin/master..$DIM_GVT_LINUX_REMOTE/gvt-next -- drivers/gpu/drm/i915); do
		echo "Considering $(git --no-pager log --oneline -1 $commit)"
		log=$(mktemp)

		# Look at history for already cherry-picked fixes.
		# Note: use *local* branches to account for unpushed commits.
		git log gvt-fixes --after=12months --oneline \
		    --grep="cherry picked .* $commit" > $log
		if [ "$(cat $log)" = "" ]; then
			git log gvt-next-fixes --after=12months --oneline \
			    --grep="cherry picked .* $commit" > $log
		fi

		if [ "$(cat $log)" = "" ]; then
			# Try cherry-pick, offer options on fail.
			if ! git cherry-pick -e -x -s $commit; then
				select choice in "Diff" "Resolve" "Skip" "Abort"; do
					case $choice in
						Diff)
							git diff
							;;
						Resolve)
							exit
							;;
						Skip)
							git cherry-pick --abort
							break
							;;
						Abort)
							git cherry-pick --abort
							exit
							;;
					esac
				done
			fi
		else
			echo "Already backported as:"
			sed 's/^/\t/' < $log
		fi
		rm -f $log
	done
}

function dim_cherry_pick_fixes
{
	assert_branch gvt-fixes
	dim_cherry_pick_branch "$@"
}

function dim_cherry_pick_next_fixes
{
	assert_branch gvt-next-fixes
	dim_cherry_pick_branch "$@"
}

dim_alias_ar=apply-resolved
function dim_apply_resolved
{
	make -j 20 && git add -u && git am --resolved
	checkpatch_commit HEAD
	git commit --amend &
}

dim_alias_mrr=magic-rebase-resolve
function dim_magic_rebase_resolve
{
	git diff HEAD | patch -p1 -R
	cat .git/rebase-merge/patch | dim mp
	make -j 20
	git add -u
	git rebase --continue
}

#dim_alias_ai=apply-igt
#function dim_apply_igt
#{
#	cd ~/xorg/intel-gpu-tools/
#	git am --whitespace=fix -3 -s
#}

dim_alias_mp=magic-patch
function dim_magic_patch
{
    warn_or_fail "FIXME"
    
	if [[ "$1" = "-a" ]]; then
		cd `cat ~/.dim-last-path`
	fi

	local conflict_files=`patch -p1 | grep "saving rejects" | sed -e "s/.*saving rejects to file \(.*\)/\1/"`

	if [[ $conflict_files != "" ]] ; then
		echo conflicts found!
	fi

	for file in $conflict_files ; do
		echo wiggling in ${file%.rej}:
		#cat $file
		rm -f ${file%.rej}.porig
		wiggle -r ${file%.rej} $file || true
	done
}

function dim_create_branch
{
	if [[ "x$1" = "x" ]]; then
		echo "usage: $0 $subcommand branch [commit-ish]"
		exit 1
	fi
	branch=$1
	if [[ "x$2" = "x" ]]; then
		start=HEAD
	else
		start=$2
	fi

	cd $DIM_PREFIX/$DIM_GVT_LINUX

	$DRY git branch $branch $start
	git push $DRY_RUN $DIM_GVT_LINUX_REMOTE +$branch --set-upstream
	#cd $DIM_PREFIX/gvt-rerere
	cd $DIM_PREFIX
	$DRY echo "staging_branches=\"\$staging_branches origin/$branch\"" \
	     >> staging.conf
	#$DRY git add staging.conf
	#$DRY git commit --quiet -m "Adding $branch to -staging"
}

function dim_remove_branch
{
	if [[ "x$1" = "x" ]]; then
		echo "usage: $0 $subcommand branch"
		exit 1
	fi
	branch=$1

	cd $DIM_PREFIX/$DIM_GVT_LINUX

	if ! $DRY git branch -d $branch ; then
		warn_or_fail "Can't remove $branch in working repo"
	fi

	if [[ -d $DIM_PREFIX/$branch ]] ; then
		rm -R $DIM_PREFIX/$branch
	fi

	cd $DIM_PREFIX/gvt-staging
	git push $DRY_RUN origin --delete $branch
	$DRY git fetch origin --prune
	#cd $DIM_PREFIX/gvt-rerere
	cd $DIM_PREFIX
	full_branch="origin/$branch"
	$DRY sed -e "/${full_branch//\//\\\/}/d" -i staging.conf
	#$DRY git add staging.conf
	#$DRY git commit --quiet -m "Deleted $branch and removed from -staging"
}

function dim_cd
{
	local path

	if [[ -d $DIM_PREFIX/$1 ]] ; then
		path=$DIM_PREFIX/$1
	else
		path=$DIM_PREFIX/$DIM_GVT_LINUX
	fi

	echo $path > ~/.dim-last-path
	cd $path
}

dim_alias_co=checkout
function dim_checkout
{
	if [[ "x$1" = "x" ]]; then
		echo "usage: $0 $subcommand branch"
		exit 1
	fi

	dim_cd $1
	if ! git branch | grep $1 > /dev/null ; then
		git checkout -t $DIM_GVT_LINUX_REMOTE/$1
	else
		git checkout $1
	fi
}

function dim_con
{
	dim_checkout gvt-next "$@"
}

function dim_cof
{
	dim_checkout gvt-fixes "$@"
}

function dim_conf
{
	dim_checkout gvt-next-fixes "$@"
}

# check sob for one commit id
function commit_check_sob
{
    local ret=0

    git show $1 --pretty=full > /tmp/$1.tmp
    local target=/tmp/$1.tmp

    local author=`grep -m 1 Author $target`
    author=`echo $author | sed s/Author:// | xargs`

    local committer=`grep -m 1 Commit $target`
    committer=`echo $committer | sed s/Commit:// | xargs`

    local author_sob="Signed-off-by: $author"
    local committer_sob="Signed-off-by: $committer"

    if ! grep "$author_sob" $target > /dev/null;  then
	#echo "sob missing for author $author, require $author_sob"
	rm -f $target
	return 1
    fi

    if ! grep -q "$committer_sob" $target > /dev/null ; then
	#echo "sob missing for committer $committer, require $committer_sob"
	rm -f $target
	return 1
    fi

    return 0
}

function dim_check_next_sob
{
    assert_branch gvt-next
    local commits=`git log --format=%h "$@"`

    for commit in $commits; 
    do
	if ! commit_check_sob $commit; then
	    echo -n "Bad: "
	else
	    echo -n "Good: "
	fi
	echo `git log -1 --oneline $commit`
    done
}

function dim_check_fixes_sob
{
    assert_branch gvt-fixes
    local commits=`git log --format=%h "$@"`

    for commit in $commits; 
    do
	if ! commit_check_sob $commit; then
	    echo -n "Bad: "
	else
	    echo -n "Good: "
	fi
	echo `git log -1 --oneline $commit`
    done
}

function dim_check_next_fixes_sob
{
    assert_branch gvt-next-fixes
    local commits=`git log --format=%h "$@"`

    for commit in $commits;
    do
	if ! commit_check_sob $commit; then
	    echo -n "Bad: "
	else
	    echo -n "Good: "
	fi
	echo `git log -1 --oneline $commit`
    done
}

# $1 is the git sha1 to check
function checkpatch_commit
{
	local commit=$1
	local cmd="git show --pretty=email $commit"

	git --no-pager log --oneline -1 $commit
	$cmd | scripts/checkpatch.pl -q --emacs --strict - || true

	local bug_lines=$($cmd | grep -m 1 -B 1 '^\+.*\WBUG' | grep -c '^[+-].*\WBUG')
	if test "$bug_lines" -eq 1; then
		warn_or_fail "New BUG macro added"
	fi

	# change for gvt-next
        if [ "$branch" = "gvt-next" ]; then
		local non_i915_files=$(git diff-tree --no-commit-id --name-only -r $commit | \
			grep -v "^\(drivers/gpu/drm/i915/\|include/drm/i915\|include/uapi/drm/i915\)")

		if [ -n "$non_i915_files" ]; then
			echo -e "The following files are outside of i915 maintenance scope:\n"
			echo "$non_i915_files"
			echo -e "\nConfirm you have appropriate Acked-by and Reviewed-by for above files."
		fi
	fi
}

# turn $1 in to a git commit range
function rangeish()
{
	if [ -z "$1" ]; then
		echo "HEAD^..HEAD"
	elif [ -n "`echo $1 | grep '\.\.'`" ]; then
		echo "$1"
	else
		echo "$1..HEAD"
	fi
}

dim_alias_check_patch=checkpatch
dim_alias_cp=checkpatch
function dim_checkpatch
{
	local range=$(rangeish "$1")

	for commit in $(git rev-list --reverse $range); do
		checkpatch_commit $commit || true
	done
}

function dim_checker
{
	rm drivers/gpu/drm/i915/*.o &> /dev/null || true
	rm drivers/gpu/drm/i915/*.ko &> /dev/null || true
	make C=1 drivers/gpu/drm/i915/i915.ko
}

function prep_pull_mail_greetings
{
	if [ -r $DIM_TEMPLATE_HELLO ]; then
		cat $DIM_TEMPLATE_HELLO
	else
		cat <<-EOF
		Hi Daniel,

		EOF
	fi
}

function prep_pull_mail_signature
{
	if [ -r $DIM_TEMPLATE_SIGNATURE ]; then
		cat $DIM_TEMPLATE_SIGNATURE
	else
		cat <<-EOF

		Cheers,


		EOF
	fi
}

# print pull mail overview based on tags in $@, if any
# without tags, print a reminder
function prep_pull_mail_overview
{
	if [ "$#" = "0" ]; then
		echo "*** insert pull request overview here ***"
	else
		for tag in $@ ; do
			local obj=`git rev-parse $tag`
			if [[ `git cat-file -t $obj` == "tag" ]] ; then
				echo $tag:
				git cat-file -p $obj | tail -n+6
			fi
		done
	fi
}

# prepare a pull request mail
# $@: tags, if any, to extract into the pull request overview
function prep_pull_mail
{
	prep_pull_mail_greetings > ~/tmp/dim-pull-request
	prep_pull_mail_overview $@ >> ~/tmp/dim-pull-request
	prep_pull_mail_signature >> ~/tmp/dim-pull-request
}

function dim_create_workdir
{
	cd $DIM_PREFIX
	local branches

	if [[ "x$1" = "x" ]]; then
		echo "usage: $0 $subcommand branch|all"
		exit 1
	elif [[ "$1" = "all" ]] ; then
		branches=$dim_branches
	else
		branches=$1
	fi

	for branch in $branches ; do
		if [[ -d $branch ]] ; then
			continue;
		fi

		echo Creating separate workdir for $branch

		if git help worktree &> /dev/null; then
			# native worktree support was added in git 2.5
			cd $DIM_GVT_LINUX
			$DRY git worktree prune
			$DRY git worktree add $DIM_PREFIX/$branch $branch
			cd $DIM_PREFIX
		else
		    #$DRY git-new-workdir $DIM_GVT_LINUX $branch $branch
		    echo "Your git version doesn't support worktree"
		    exit 1
		fi
	done
}

dim_alias_fw=for-each-workdirs
function dim_for_each_workdirs
{
	cd $DIM_PREFIX/$DIM_GVT_LINUX
	$@
	for branch in $dim_branches ; do
		if [[ -d $DIM_PREFIX/$branch ]] ; then
			cd $DIM_PREFIX/$branch
			$@
		fi
	done
}

function dim_update_next
{
    warn_or_fail "FIXME"

        assert_branch gvt-next

	git pull --ff-only

	if ! git branch --merged $DIM_GVT_LINUX_REMOTE/gvt-staging | grep gvt-fixes &> /dev/null ; then
		echo "gvt-fixes not merged into -nigthly, please update!"
		exit 2
	fi
	if ! git branch --merged $DIM_GVT_LINUX_REMOTE/gvt-staging | grep gvt-next &> /dev/null ; then
		echo "gvt-next not merged into -nigthly, please update!"
		exit 2
	fi

	# XXX driver date? disable for now
#	driver_date=`date +%Y%m%d`
#	$DRY sed -i -e "s/^#define DRIVER_DATE.*\"[0-9]*\"$/#define DRIVER_DATE\t\t\"$driver_date\"/" \
#	     drivers/gpu/drm/i915/i915_drv.h
#	$DRY git add drivers/gpu/drm/i915/i915_drv.h
#	echo -e "drm/i915: Update DRIVER_DATE to $driver_date\n\nSigned-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>" | \
#		git commit -s -F -

	gitk gvt-next ^$DIM_DRM_INTEL_UPSTREAM_REMOTE/drm-intel-next-queued &

	# try to push gvt next first in case someone raced
	dim push-next

	dim_update_next_continue
}

function dim_update_next_continue
{
	assert_branch gvt-next

	# no next-queued for gvt yet
	#git push $DRY_RUN $DIM_GVT_LINUX_REMOTE drm-intel-next-queued:drm-intel-next

	tag=gvt-next-$today
	$DRY git tag -f -a $tag $DIM_GVT_LINUX_REMOTE/gvt-next
	git push $DRY_RUN -f $DIM_GVT_LINUX_REMOTE $tag

	# no testing for gvt yet, just staging
	#echo "Updating -testing to latest -staging"
	#git push $DRY_RUN $DIM_GVT_LINUX_REMOTE +$DIM_GVT_LINUX_REMOTE/drm-intel-staging:drm-intel-testing
	#$DRY git tag -f drm-intel-testing-$today $DIM_GVT_LINUX_REMOTE/drm-intel-testing
	#$DRY git push -f $DIM_GVT_LINUX_REMOTE drm-intel-testing-$today

	cat > ~/tmp/test-request <<-HERE
		Hi all,

		New gvt-staging cycle with cool stuff:
		HERE
	obj=`git rev-parse $tag`
	if [[ `git cat-file -t $obj` == "tag" ]] ; then
		git cat-file -p $obj | tail -n+6 >> ~/tmp/test-request
	else
		echo "<tag doesn't contain a changelog overview, fix this>" >> ~/tmp/test-request
	fi
	cat >> ~/tmp/test-request <<-HERE

		Happy testing!

		Cheers,
		HERE

	$DRY $DIM_MUA -s "Updated gvt-staging" \
	     -i ~/tmp/test-request \
	     -c "$addr_gvt_maintainer1" \
	     -c "$addr_gvt_maintainer2" \
	     "$addr_gvt_qa"
}

function dim_tag_next
{
    warn_or_fail "FIXME"
    
	cd $DIM_PREFIX/$DIM_GVT_LINUX
	git fetch $DIM_GVT_LINUX_REMOTE

	#if [ $(git rev-parse drm-intel-next) == $(git rev-parse drm-intel-next@{u}) ] ; then
	# As we only have one -next for gvt, so just tagging
	if [ : ]; then
		echo "Tagging current gvt-next"

		tag=gvt-next-$today
		$DRY git tag -f $tag $DIM_GVT_LINUX_REMOTE/gvt-next
		git push $DRY_RUN -f $DIM_GVT_LINUX_REMOTE $tag
	else
		echo "gvt-next not up-to-date, aborting"
		exit
	fi

}

# dim_pull_request branch upstream
function dim_pull_request
{
    warn_or_fail "FIXME"

        if [[ "x$1" = "x" || "x$2" = "x" ]]; then
		echo "usage: $0 $subcommand branch upstream"
		exit 1
	fi

	branch=$1
	upstream=$2

	if [ "$branch" != "gvt-next" ]; then
		assert_branch $branch
	else
		cd $DIM_PREFIX/$DIM_GVT_LINUX
	fi

	git fetch ${upstream%%/*} >& /dev/null || true
	echo "Using $upstream as the upstream"

	if [ "$branch" = "gvt-next" ]; then
		# gvt-next pulls have been tagged using dim update-next
		gvt_next_tags=`git log $DIM_GVT_LINUX_REMOTE/gvt-next ^$upstream --decorate | grep "(.*tag: gvt-next-" | sed -e "s/^.*(.*tag: \(gvt-next-[^ ,]*\).*)$/\1/"`
		prep_pull_mail $gvt_next_tags
		tag=`git describe --all --exact $DIM_GVT_LINUX_REMOTE/gvt-next`
	else
		tag=$branch-$today
		$DRY git tag -f $tag $DIM_GVT_LINUX_REMOTE/$branch
		$DRY git push -f $DIM_GVT_LINUX_REMOTE $tag
		prep_pull_mail
	fi

	git request-pull $upstream $drm_intel_upstream_git $tag >> ~/tmp/dim-pull-request
	$DRY $DIM_MUA -s "[PULL] $branch" \
		-i ~/tmp/dim-pull-request \
		-c "$addr_intel_gfx" \
		-c "$addr_gvt_maintainer1" \
		-c "$addr_gvt_maintainer2" \
		"$addr_drm_intel_maintainer"
}

function dim_pull_request_next
{
	upstream=${1:-$DIM_DRM_INTEL_UPSTREAM_REMOTE/gvt-next}
	dim_pull_request gvt-next $upstream
}

function dim_pull_request_fixes
{
	upstream=${1:-$DIM_DRM_INTEL_UPSTREAM_REMOTE/gvt-fixes}
	dim_pull_request gvt-fixes $upstream
}

function dim_pull_request_next_fixes
{
	upstream=${1:-$DIM_DRM_INTEL_UPSTREAM_REMOTE/gvt-next-fixes}
	dim_pull_request gvt-next-fixes $upstream
}

# Note: used by bash completion
function dim_list_upstreams
{
	echo origin/master
	echo $DIM_DRM_INTEL_UPSTREAM_REMOTE/gvt-next
	echo $DIM_DRM_INTEL_UPSTREAM_REMOTE/gvt-fixes
}

# Note: used by bash completion
function dim_list_branches
{
	echo $dim_branches | sed 's/ /\n/g'
}

dim_alias_ub=update-branches
function dim_update_branches
{
	cd $DIM_PREFIX/$DIM_GVT_LINUX
	for remote in $DIM_GVT_LINUX_REMOTE $DIM_DRM_INTEL_UPSTREAM_REMOTE origin; do
	        echo "Fetching $remote..."
		git fetch $remote
	done

	assert_repo_clean

	for branch in $dim_branches ; do
		dim_checkout $branch
		if git diff --quiet $DIM_GVT_LINUX_REMOTE/$branch; then
			$DRY git rebase
		else
			$DRY git rebase -i
		fi
	done
	dim_checkout gvt-next
	$DRY git reset --hard $DIM_GVT_LINUX_REMOTE/gvt-next
	# TODO: Restore -staging merge state from the rerere-cache
	# branch
	#update_rerere_cache
}

function dim_setup
{
	if [ ! -d $DIM_PREFIX ]; then
		echo "please set up your repository directory with:"
		echo "    mkdir -p $DIM_PREFIX"
		echo "or update your configuration"
		exit 1
	fi
	cd $DIM_PREFIX

	if [ ! -d $DIM_PREFIX/$DIM_GVT_LINUX ]; then
		echo "please set up your maintainer linux repository at $DIM_PREFIX/$DIM_GVT_LINUX with:"
		echo "    cd $DIM_PREFIX"
		echo "    git clone $gvt_linux_git $DIM_GVT_LINUX"
		echo "or update your configuration."
		exit 1
	fi
	cd $DIM_GVT_LINUX
	if ! git remote -v | grep "^origin[[:space:]]" | grep $gvt_linux_git > /dev/null; then
		echo "please set up remote origin for $gvt_linux_git"
		exit 1
	fi
	
	if ! git remote -v | grep "^$DIM_GVT_LINUX_REMOTE[[:space:]]" | grep $gvt_linux_git > /dev/null; then
		echo "please set up remote $DIM_GVT_LINUX_REMOTE for $gvt_linux_git with:"
		echo "    git remote add $DIM_GVT_LINUX_REMOTE $gvt_linux_git"
		echo "or update your configuration."
		exit 1
	fi

	if ! git remote -v | grep "^$DIM_DRM_INTEL_UPSTREAM_REMOTE[[:space:]]" | grep $drm_intel_upstream_git > /dev/null; then
		echo "please set up remote $DIM_DRM_INTEL_UPSTREAM_REMOTE for $drm_intel_upstream_git with:"
		echo "    git remote add $DIM_DRM_INTEL_UPSTREAM_REMOTE $drm_intel_upstream_git"
		echo "or update your configuration."
		exit 1
	fi

	if ! git remote -v | grep "^$DIM_DRM_TIP_UPSTREAM_REMOTE[[:space:]]" | grep $drm_tip_upstream_git > /dev/null; then
		echo "please set up remote $DIM_DRM_TIP_UPSTREAM_REMOTE for $drm_tip_upstream_git with:"
		echo "    git remote add $DIM_DRM_TIP_UPSTREAM_REMOTE $drm_tip_upstream_git"
		echo "or update your configuration."
		exit 1
	fi

	cd ..

	# maintainer tools : might seperate from kernel tree?
	#echo "Setting up maintainer-tools ..."
	#if [ ! -d maintainer-tools ]; then
	#	git clone --reference=$DIM_PREFIX/$DIM_GVT_LINUX/.git $gvt_linux_git maintainer-tools
	#fi
	#cd maintainer-tools
	#git config remote.origin.url $gvt_linux_git
	#echo "$DIM_PREFIX/$DIM_GVT_LINUX/.git/objects" > .git/objects/info/alternates
	#git repack -a -d -l
	#if ! git branch | grep maintainer-tools > /dev/null ; then
	#	git checkout -t origin/maintainer-tools
	#fi
	#cd ..

	#echo "Setting up gvt-rerere ..."
	#if [ ! -d gvt-rerere ]; then
	#	git clone --reference=$DIM_PREFIX/$DIM_GVT_LINUX/.git $gvt_linux_git gvt-rerere
	#fi
	#cd gvt-rerere
	#git config remote.origin.url $gvt_linux_git
	#echo "$DIM_PREFIX/$DIM_GVT_LINUX/.git/objects" > .git/objects/info/alternates
	#git repack -a -d -l
	#if ! git branch | grep gvt-rerere-cache > /dev/null ; then
	#	git checkout -t origin/gvt-rerere-cache
	#fi
	#cd ..

	echo "Setting up gvt-staging ..."
	if [ ! -d gvt-staging ]; then
		git clone --reference=$DIM_PREFIX/$DIM_GVT_LINUX/.git $gvt_linux_git gvt-staging
	fi
	cd gvt-staging
	mkdir -p .git/rr-cache
	git config remote.origin.url $gvt_linux_git
	echo "$DIM_PREFIX/$DIM_GVT_LINUX/.git/objects" > .git/objects/info/alternates
	git repack -a -d -l
	if ! git branch | grep gvt-staging > /dev/null ; then
		git checkout -t origin/gvt-staging
	fi
	# check our upstreams
	if git remote | grep $DIM_DRM_INTEL_UPSTREAM_REMOTE > /dev/null ; then
	        git config remote.$DIM_DRM_INTEL_UPSTREAM_REMOTE.url $drm_intel_upstream_git
	else
	        git remote add $DIM_DRM_INTEL_UPSTREAM_REMOTE $drm_intel_upstream_git
	fi
	if git remote | grep $DIM_DRM_TIP_UPSTREAM_REMOTE > /dev/null ; then
	        git config remote.$DIM_DRM_TIP_UPSTREAM_REMOTE.url $drm_tip_upstream_git
	else
	        git remote add $DIM_DRM_TIP_UPSTREAM_REMOTE $drm_tip_upstream_git
	fi

	if git remote | grep vfio-upstream > /dev/null ; then
		git config remote.vfio-upstream.url $vfio_upstream_git
	else
		git remote add vfio-upstream $vfio_upstream_git
	fi

	if git remote | grep kvm-upstream > /dev/null ; then
		git config remote.kvm-upstream.url $kvm_upstream_git
	else
		git remote add kvm-upstream $kvm_upstream_git
	fi

	echo "staging_branches=\"drm-tip/drm-tip kvm-upstream/linux-next vfio-upstream/next origin/gvt-next\"" > $DIM_PREFIX/staging.conf

	echo "gvt dim setup successfully completed!"
}

function assert_branch
{
	local branch=$1

	dim_cd $branch

	if git branch | grep $branch | grep '\*' ; then
		return 0
	else
		echo "You're on the wrong branch, expected $branch in $PWD"
		return 1
	fi
}

function assert_repo_clean
{
	if [[ -n "$(git status --porcelain --untracked-files=no)" ]]; then
		echo "Repository not clean, aborting."
		exit 1
	fi
}

# Note: used by bash completion
function dim_list_commands
{
	declare -F | grep -o " dim_[a-zA-Z_]*" | sed 's/^ dim_//;s/_/-/g'
}

# Note: used by bash completion
function dim_list_aliases
{
	# use posix mode to omit functions in set output
	( set -o posix; set ) | grep "^dim_alias_[a-zA-Z0-9_]*=" |\
		sed 's/^dim_alias_//;s/=/\t/;s/_/-/g'
}

function dim_cat_to_fixup
{
	cd $DIM_PREFIX/gvt-staging
	cat > `cat .fixup_file_path`
}

#tag contains $1
function dim_tc
{
	cd $DIM_PREFIX/$DIM_GVT_LINUX
	local tag=$(git tag --contains $1 | grep ^v | sort -V | head -n 1)
	if [[ -n "$tag" ]]; then
		echo "$tag"
	else
		# not in a tagged release, show upstream branches
		git branch -r --contains $1 \
		    $DIM_GVT_LINUX_REMOTE/* \
		    $DIM_DRM_INTEL_UPSTREAM_REMOTE/gvt-next \
		    $DIM_DRM_INTEL_UPSTREAM_REMOTE/gvt-fixes \
		    origin/master | sed 's/^ *//'
	fi
}

function dim_fixes
{
	cd $DIM_PREFIX/$DIM_GVT_LINUX
	local sha1=$1

	git log -1 $sha1 "--pretty=format:Fixes: %H (\"%s\")%n" | \
		sed -e 's/\([0-f]\{12\}\)[0-f]*/\1/'

	local tag=$(git tag --contains $1 | grep ^v | sort -V | head -n 1)
	if [[ -n "$tag" ]]; then
		if echo "$tag" | grep -e "-rc" &> /dev/null ; then
			echo Cc: drm-intel-fixes@lists.freedesktop.org
		else
			echo Cc: stable@vger.kernel.org
		fi
	else
		git fetch $DIM_GVT_LINUX_REMOTE
		# Check whether it's already in a feature pile tag
		if git merge-base --is-ancestor $sha1 $DIM_GVT_LINUX_REMOTE/gvt-next ; then
			# Make sure we're in the critical window where we might
			# need to cherry-pick to dinf. critical window is -rc5
			# up to end of merge window, hence exclude if in -rc1
			# through rc-4.
			if ! git tag | grep ^v | sort -V | tail -n1 | grep -e "-rc[1-4]$" &> /dev/null ; then
				echo Cc: drm-intel-fixes@lists.freedesktop.org
			fi
		fi
	fi
}

function dim_help
{
	manpage=$DIM_PREFIX/maintainer-tools/dim.rst
	if [ ! -e "$manpage" ]; then
		manpage=$(dirname $(readlink -f $0))/dim.rst
		if [ ! -e "$manpage" ]; then
			echo "Can't find the man page. See http://cgit.freedesktop.org/drm-intel/tree/dim.rst?h=maintainer-tools"
			exit 1
		fi
	fi

	if hash rst2man 2>/dev/null; then
		renderer=rst2man
		pager="man -l -"
	else
		renderer=cat
		pager=${PAGER:-cat}
	fi

	$renderer < $manpage | $pager
}

function dim_usage
{
	echo "usage: $0 [OPTIONS] SUBCOMMAND [ARGUMENTS]"
	echo
	echo "The available subcommands are:"
	dim_list_commands | sed 's/^/\t/'
	echo
	echo "See '$0 help' for more information."
}

# dim subcommand aliases
declare -n subcmd=dim_alias_${subcommand//-/_}
if [ -z "$subcmd" ]; then
	subcmd="$subcommand"
fi

# if there's a function by the subcommand name, call it
subcmd_func=dim_${subcmd//-/_}
if declare -f $subcmd_func >/dev/null; then
	$subcmd_func "$@"
else
	echo "$0: '$subcommand' is not a dim command." >&2
	dim_usage
fi
